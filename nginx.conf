user nginx;
worker_processes auto;
error_log /dev/stderr warn;
pid /run/nginx/nginx.pid;

load_module /usr/lib/nginx/modules/ngx_stream_module.so;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    log_format detailed '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'rt=$request_time uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    # Log to stdout for Docker logs
    access_log /dev/stdout main;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 16M;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/javascript application/xml+rss 
               application/json application/xml;
    
    server {
        listen 80;
        server_name localhost;
        
        # Security: Hide nginx version
        server_tokens off;
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        location /status {
            access_log off;
            return 200 '{"status":"ok","timestamp":"$time_iso8601"}\n';
            add_header Content-Type application/json;
        }
        
        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            
            # Cache static files
            location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
        }
        
        # Security: Deny access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Security: Deny access to backup files
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
}

stream {
    # Stream logging format
    log_format basic '$remote_addr [$time_local] '
                     '$protocol $status $bytes_sent $bytes_received '
                     '$session_time';
    
    log_format detailed '$remote_addr [$time_local] '
                       '$protocol $status $bytes_sent $bytes_received '
                       '$session_time "$upstream_addr" '
                       '$upstream_bytes_sent $upstream_bytes_received '
                       '$upstream_connect_time';
    
    # Example TCP Load Balancer (uncomment to use)
    # upstream tcp_backend {
    #     server backend1.example.com:3306 weight=3 max_fails=2 fail_timeout=30s;
    #     server backend2.example.com:3306 weight=2 max_fails=2 fail_timeout=30s;
    #     server backend3.example.com:3306 backup;
    # }
    # 
    # server {
    #     listen 3306;
    #     proxy_pass tcp_backend;
    #     proxy_timeout 1s;
    #     proxy_responses 1;
    #     proxy_connect_timeout 1s;
    #     access_log /dev/stdout detailed;
    # }
    
    # Example SSL Passthrough (uncomment to use)
    # map $ssl_preread_server_name $backend_pool {
    #     app1.example.com backend_app1;
    #     app2.example.com backend_app2;
    #     default backend_default;
    # }
    # 
    # upstream backend_app1 {
    #     server app1-server:443;
    # }
    # 
    # upstream backend_app2 {
    #     server app2-server:443;
    # }
    # 
    # upstream backend_default {
    #     server default-server:443;
    # }
    # 
    # server {
    #     listen 443;
    #     proxy_pass $backend_pool;
    #     ssl_preread on;
    #     access_log /dev/stdout detailed;
    # }
}