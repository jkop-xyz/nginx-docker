name: Build and Push Nginx Image

on:
  push:
    branches: [main]
  schedule:
    # Run every day at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/nginx-stream

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.version-check.outputs.should-build }}
      nginx-version: ${{ steps.version-check.outputs.nginx-version }}
    steps:
      - name: Check nginx version
        id: version-check
        run: |
          # Get latest nginx version from Alpine package repository
          LATEST_VERSION=$(wget -qO- "https://pkgs.alpinelinux.org/packages?name=nginx&branch=edge&repo=main&arch=x86_64" | grep -oP 'nginx-\K[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          
          # Get current image version from registry (if exists)
          CURRENT_VERSION=""
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest >/dev/null 2>&1; then
            CURRENT_VERSION=$(docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest nginx -v 2>&1 | grep -oP 'nginx/\K[0-9]+\.[0-9]+\.[0-9]+' || echo "")
          fi
          
          echo "Latest version: $LATEST_VERSION"
          echo "Current version: $CURRENT_VERSION"
          echo "nginx-version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          
          if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ] || [ "${{ github.event_name }}" = "push" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "New version detected or manual trigger - will build"
          else
            echo "should-build=false" >> $GITHUB_OUTPUT
            echo "No new version - skipping build"
          fi

  build-and-push:
    needs: check-version
    if: needs.check-version.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.check-version.outputs.nginx-version }},enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Nginx with Stream Module
            org.opencontainers.image.description=Alpine-based Nginx with stream module for TCP/UDP load balancing
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            nginx.version=${{ needs.check-version.outputs.nginx-version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Create release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: nginx-${{ needs.check-version.outputs.nginx-version }}
          name: Nginx ${{ needs.check-version.outputs.nginx-version }}
          body: |
            ðŸš€ **Automated build with nginx version ${{ needs.check-version.outputs.nginx-version }}**
            
            ## Features
            - âœ… Alpine Linux base (minimal size)
            - âœ… Nginx with stream module enabled
            - âœ… Multi-architecture support (amd64, arm64)
            - âœ… Security hardened configuration
            - âœ… Performance optimizations
            - âœ… Health check endpoint at `/health`
            
            ## Usage
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-version.outputs.nginx-version }}
            docker run -p 80:80 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ```
            
            ## Image Details
            - **Registry**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}`
            - **Tags**: `latest`, `${{ needs.check-version.outputs.nginx-version }}`
            - **Digest**: `${{ steps.build.outputs.digest }}`
          generate_release_notes: true
          make_latest: true

  security-scan:
    needs: [check-version, build-and-push]
    if: needs.check-version.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'