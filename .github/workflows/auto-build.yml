name: Auto Update Custom Nginx Image (Alpine)

on:
  workflow_dispatch: # Allow manual trigger
  schedule:
    - cron: '0 0 * * *' # Run daily at midnight UTC

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }} # e.g., your-github-user/your-nginx-repo

jobs:
  check_and_build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Required to push to GHCR
      security-events: write # Required for Trivy SARIF upload

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU (for multi-arch builds if needed)
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all # Or specific platforms like linux/amd64,linux/arm64

      - name: Set up Docker Buildx (for caching and multi-arch)
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest Nginx stable version from nginx.org
        id: nginx_latest
        run: |
          LATEST_VERSION=$(curl -s "https://nginx.org/en/download.html" | \
                           grep "Stable version" -A 1 | \
                           grep -oP 'nginx-\K[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
          if [ -z "$LATEST_VERSION" ]; then
            echo "::error::Could not determine latest Nginx version from nginx.org"
            exit 1
          fi
          echo "latest_nginx_version=$LATEST_VERSION" >> "$GITHUB_OUTPUT"
          echo "Latest stable Nginx version detected: $LATEST_VERSION"

      - name: Get current Nginx version in our latest image
        id: current_image_nginx
        run: |
          CURRENT_VERSION=""
          if docker pull "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" &>/dev/null; then
            CURRENT_VERSION=$(docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
                              --format '{{ index .Config.Labels "org.opencontainers.image.version" }}' \
                              2>/dev/null || echo "")
            echo "Current image Nginx version (from label): $CURRENT_VERSION"
          else
            echo "No 'latest' image found or unable to pull. Assuming no current version."
          fi
          echo "current_nginx_version=$CURRENT_VERSION" >> "$GITHUB_OUTPUT"

      - name: Compare Nginx versions
        id: version_compare
        run: |
          LATEST="${{ steps.nginx_latest.outputs.latest_nginx_version }}"
          CURRENT="${{ steps.current_image_nginx.outputs.current_nginx_version }}"

          if [ -z "$LATEST" ]; then
            echo "::error::Latest Nginx version not found. Exiting."
            exit 1
          fi

          if [ -z "$CURRENT" ]; then
            echo "No existing custom Nginx image found. Building the first one."
            echo "build_needed=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [ "$(printf '%s\n' "$LATEST" "$CURRENT" | sort -V | head -n 1)" = "$CURRENT" ] && [ "$LATEST" != "$CURRENT" ]; then
            echo "Newer Nginx version detected: $LATEST > $CURRENT. A build is needed."
            echo "build_needed=true" >> "$GITHUB_OUTPUT"
          else
            echo "Current image Nginx version ($CURRENT) is up-to-date with latest stable ($LATEST). No build needed."
            echo "build_needed=false" >> "$GITHUB_OUTPUT"
          fi

      # ----------------------------------------------------------------------
      # TEMPORARILY DISABLE THIS STEP TO ISOLATE THE ERROR
      # Comment out the entire 'Set Image Tags and Labels' step
      # You can uncomment it later if this fixes the problem
      # - name: Set Image Tags and Labels
      #   id: meta
      #   if: steps.version_compare.outputs.build_needed == 'true'
      #   uses: docker/metadata-action@v5
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      #     tags: |
      #       type=raw,value=${{ steps.nginx_latest.outputs.latest_nginx_version }}
      #       type=raw,value=latest
      # ----------------------------------------------------------------------

      - name: Build and Push Docker Image
        if: steps.version_compare.outputs.build_needed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # ---------------------------------------------------------------------
          # TEMPORARILY HARDCODE TAGS AND BUILD-ARGS TO ISOLATE THE PROBLEM
          # If this works, the issue is with how steps.meta.outputs.tags or
          # steps.nginx_latest.outputs.latest_nginx_version is being formed.
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-static-version
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-test
          build-args: |
            NGINX_VERSION=1.24.0 # Hardcode a specific Nginx version for this test
          # ---------------------------------------------------------------------
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Trivy Container Image Scan
        # This step will scan 'test-static-version' if the previous step pushed it successfully.
        # Adjust image-ref to match the temporary tag.
        if: steps.version_compare.outputs.build_needed == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-static-version' # Adjusted for temporary tag
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          vuln-type: 'os,library'
          scanners: 'vuln,secret'

      - name: Upload Trivy Scan Results to GitHub Security Tab
        if: always() && steps.version_compare.outputs.build_needed == 'true' && github.event_name != 'workflow_dispatch'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'